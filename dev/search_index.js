var documenterSearchIndex = {"docs":
[{"location":"reference/","page":"API Reference","title":"API Reference","text":"CurrentModule = SimpleStringScanners","category":"page"},{"location":"reference/#API-reference","page":"API Reference","title":"API reference","text":"","category":"section"},{"location":"reference/#String-Scanners","page":"API Reference","title":"String Scanners","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"SimpleStringScanners.SimpleStringScanner\neos\nadvance!\nscan!","category":"page"},{"location":"reference/#SimpleStringScanners.SimpleStringScanner","page":"API Reference","title":"SimpleStringScanners.SimpleStringScanner","text":"SimpleStringScanner\n\ntype for SimpleStringScanner\n\n\n\n\n\n","category":"type"},{"location":"reference/#SimpleStringScanners.eos","page":"API Reference","title":"SimpleStringScanners.eos","text":"eos(scanner::SimpleStringScanner) -> Bool\n\nTests end-of-string.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.advance!","page":"API Reference","title":"SimpleStringScanners.advance!","text":"advance!(scanner::SimpleStringScanner, width::Integer) -> SubString\n\nAdvances the inner pointer of scanner by width codeunits, and returns scanned substring.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.scan!","page":"API Reference","title":"SimpleStringScanners.scan!","text":"scan!(scanner::SimpleStringScanner, r::Regex, add_opts)\n\nSearch for the first match of the regular expression r in s from the pointer scan.start, advances the pointer to the next code of the match, and returns a RegexMatch object containing the match. Returns nothing if the match failed.\n\n\n\n\n\n","category":"function"},{"location":"reference/#parse","page":"API Reference","title":"parse","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Base.parse\nparseBool\nparseInt8\nparseInt16\nparseInt32\nparseInt64\nparseInt128\nparseBigInt\nparseUInt8\nparseUInt16\nparseUInt32\nparseUInt64\nparseUInt128\nparseFloat16\nparseFloat32\nparseFloat64\nparseBigFloat","category":"page"},{"location":"reference/#Base.parse","page":"API Reference","title":"Base.parse","text":"parse(type::Type, s::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nstr = advance!(scanner, width); parse(type, str; base)\n\n\n\n\n\nparse(type::Type, scanner::SimpleStringScanner, r::Regex, add_opts::UInt32=UInt32(0); base)\n\nEquivalent to \n\nm = scan!(scanner, r, add_opts); parse(type, m.match; base)\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseBool","page":"API Reference","title":"SimpleStringScanners.parseBool","text":"parseBool(str::AbstractString; base...)\n\nEquivalent to      - parse(Bool, str; base...)\n\n\n\n\n\nparseBool(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Bool, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Bool, str; base...).\n\n\n\n\n\nparseBool(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Bool, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Bool, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseInt8","page":"API Reference","title":"SimpleStringScanners.parseInt8","text":"parseInt8(str::AbstractString; base...)\n\nEquivalent to      - parse(Int8, str; base...)\n\n\n\n\n\nparseInt8(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Int8, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Int8, str; base...).\n\n\n\n\n\nparseInt8(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Int8, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Int8, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseInt16","page":"API Reference","title":"SimpleStringScanners.parseInt16","text":"parseInt16(str::AbstractString; base...)\n\nEquivalent to      - parse(Int16, str; base...)\n\n\n\n\n\nparseInt16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Int16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Int16, str; base...).\n\n\n\n\n\nparseInt16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Int16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Int16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseInt32","page":"API Reference","title":"SimpleStringScanners.parseInt32","text":"parseInt32(str::AbstractString; base...)\n\nEquivalent to      - parse(Int32, str; base...)\n\n\n\n\n\nparseInt32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Int32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Int32, str; base...).\n\n\n\n\n\nparseInt32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Int32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Int32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseInt64","page":"API Reference","title":"SimpleStringScanners.parseInt64","text":"parseInt64(str::AbstractString; base...)\n\nEquivalent to      - parse(Int64, str; base...)\n\n\n\n\n\nparseInt64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Int64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Int64, str; base...).\n\n\n\n\n\nparseInt64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Int64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Int64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseInt128","page":"API Reference","title":"SimpleStringScanners.parseInt128","text":"parseInt128(str::AbstractString; base...)\n\nEquivalent to      - parse(Int128, str; base...)\n\n\n\n\n\nparseInt128(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Int128, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Int128, str; base...).\n\n\n\n\n\nparseInt128(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Int128, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Int128, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseBigInt","page":"API Reference","title":"SimpleStringScanners.parseBigInt","text":"parseBigInt(str::AbstractString; base...)\n\nEquivalent to      - parse(BigInt, str; base...)\n\n\n\n\n\nparseBigInt(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(BigInt, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(BigInt, str; base...).\n\n\n\n\n\nparseBigInt(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(BigInt, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(BigInt, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseUInt8","page":"API Reference","title":"SimpleStringScanners.parseUInt8","text":"parseUInt8(str::AbstractString; base...)\n\nEquivalent to      - parse(UInt8, str; base...)\n\n\n\n\n\nparseUInt8(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(UInt8, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(UInt8, str; base...).\n\n\n\n\n\nparseUInt8(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(UInt8, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(UInt8, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseUInt16","page":"API Reference","title":"SimpleStringScanners.parseUInt16","text":"parseUInt16(str::AbstractString; base...)\n\nEquivalent to      - parse(UInt16, str; base...)\n\n\n\n\n\nparseUInt16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(UInt16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(UInt16, str; base...).\n\n\n\n\n\nparseUInt16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(UInt16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(UInt16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseUInt32","page":"API Reference","title":"SimpleStringScanners.parseUInt32","text":"parseUInt32(str::AbstractString; base...)\n\nEquivalent to      - parse(UInt32, str; base...)\n\n\n\n\n\nparseUInt32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(UInt32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(UInt32, str; base...).\n\n\n\n\n\nparseUInt32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(UInt32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(UInt32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseUInt64","page":"API Reference","title":"SimpleStringScanners.parseUInt64","text":"parseUInt64(str::AbstractString; base...)\n\nEquivalent to      - parse(UInt64, str; base...)\n\n\n\n\n\nparseUInt64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(UInt64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(UInt64, str; base...).\n\n\n\n\n\nparseUInt64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(UInt64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(UInt64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseUInt128","page":"API Reference","title":"SimpleStringScanners.parseUInt128","text":"parseUInt128(str::AbstractString; base...)\n\nEquivalent to      - parse(UInt128, str; base...)\n\n\n\n\n\nparseUInt128(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(UInt128, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(UInt128, str; base...).\n\n\n\n\n\nparseUInt128(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(UInt128, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(UInt128, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseFloat16","page":"API Reference","title":"SimpleStringScanners.parseFloat16","text":"parseFloat16(str::AbstractString; base...)\n\nEquivalent to      - parse(Float16, str; base...)\n\n\n\n\n\nparseFloat16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Float16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Float16, str; base...).\n\n\n\n\n\nparseFloat16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Float16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Float16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseFloat32","page":"API Reference","title":"SimpleStringScanners.parseFloat32","text":"parseFloat32(str::AbstractString; base...)\n\nEquivalent to      - parse(Float32, str; base...)\n\n\n\n\n\nparseFloat32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Float32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Float32, str; base...).\n\n\n\n\n\nparseFloat32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Float32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Float32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseFloat64","page":"API Reference","title":"SimpleStringScanners.parseFloat64","text":"parseFloat64(str::AbstractString; base...)\n\nEquivalent to      - parse(Float64, str; base...)\n\n\n\n\n\nparseFloat64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(Float64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(Float64, str; base...).\n\n\n\n\n\nparseFloat64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(Float64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(Float64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parseBigFloat","page":"API Reference","title":"SimpleStringScanners.parseBigFloat","text":"parseBigFloat(str::AbstractString; base...)\n\nEquivalent to      - parse(BigFloat, str; base...)\n\n\n\n\n\nparseBigFloat(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse(BigFloat, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse(BigFloat, str; base...).\n\n\n\n\n\nparseBigFloat(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse(BigFloat, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse(BigFloat, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#tryparse","page":"API Reference","title":"tryparse","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Base.tryparse\nSimpleStringScanners.tryparseBool\nSimpleStringScanners.tryparseInt8\nSimpleStringScanners.tryparseInt16\nSimpleStringScanners.tryparseInt32\nSimpleStringScanners.tryparseInt64\nSimpleStringScanners.tryparseInt128\nSimpleStringScanners.tryparseBigInt\nSimpleStringScanners.tryparseUInt8\nSimpleStringScanners.tryparseUInt16\nSimpleStringScanners.tryparseUInt32\nSimpleStringScanners.tryparseUInt64\nSimpleStringScanners.tryparseUInt128\nSimpleStringScanners.tryparseFloat16\nSimpleStringScanners.tryparseFloat32\nSimpleStringScanners.tryparseFloat64\nSimpleStringScanners.tryparseBigFloat","category":"page"},{"location":"reference/#Base.tryparse","page":"API Reference","title":"Base.tryparse","text":"tryparse(type::Type, s::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nstr = advance!(scanner, width); tryparse(type, str; base)\n\n\n\n\n\ntryparse(type::Type, scanner::SimpleStringScanner, r::Regex, add_opts::UInt32=UInt32(0); base)\n\nEquivalent to \n\nm = scan!(scanner, r, add_opts); tryparse(type, m.match; base)\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseBool","page":"API Reference","title":"SimpleStringScanners.tryparseBool","text":"tryparseBool(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Bool, str; base...)\n\n\n\n\n\ntryparseBool(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Bool, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Bool, str; base...).\n\n\n\n\n\ntryparseBool(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Bool, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Bool, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseInt8","page":"API Reference","title":"SimpleStringScanners.tryparseInt8","text":"tryparseInt8(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Int8, str; base...)\n\n\n\n\n\ntryparseInt8(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Int8, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Int8, str; base...).\n\n\n\n\n\ntryparseInt8(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Int8, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Int8, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseInt16","page":"API Reference","title":"SimpleStringScanners.tryparseInt16","text":"tryparseInt16(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Int16, str; base...)\n\n\n\n\n\ntryparseInt16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Int16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Int16, str; base...).\n\n\n\n\n\ntryparseInt16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Int16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Int16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseInt32","page":"API Reference","title":"SimpleStringScanners.tryparseInt32","text":"tryparseInt32(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Int32, str; base...)\n\n\n\n\n\ntryparseInt32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Int32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Int32, str; base...).\n\n\n\n\n\ntryparseInt32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Int32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Int32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseInt64","page":"API Reference","title":"SimpleStringScanners.tryparseInt64","text":"tryparseInt64(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Int64, str; base...)\n\n\n\n\n\ntryparseInt64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Int64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Int64, str; base...).\n\n\n\n\n\ntryparseInt64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Int64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Int64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseInt128","page":"API Reference","title":"SimpleStringScanners.tryparseInt128","text":"tryparseInt128(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Int128, str; base...)\n\n\n\n\n\ntryparseInt128(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Int128, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Int128, str; base...).\n\n\n\n\n\ntryparseInt128(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Int128, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Int128, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseBigInt","page":"API Reference","title":"SimpleStringScanners.tryparseBigInt","text":"tryparseBigInt(str::AbstractString; base...)\n\nEquivalent to      - tryparse(BigInt, str; base...)\n\n\n\n\n\ntryparseBigInt(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(BigInt, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(BigInt, str; base...).\n\n\n\n\n\ntryparseBigInt(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(BigInt, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(BigInt, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseUInt8","page":"API Reference","title":"SimpleStringScanners.tryparseUInt8","text":"tryparseUInt8(str::AbstractString; base...)\n\nEquivalent to      - tryparse(UInt8, str; base...)\n\n\n\n\n\ntryparseUInt8(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(UInt8, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(UInt8, str; base...).\n\n\n\n\n\ntryparseUInt8(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(UInt8, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(UInt8, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseUInt16","page":"API Reference","title":"SimpleStringScanners.tryparseUInt16","text":"tryparseUInt16(str::AbstractString; base...)\n\nEquivalent to      - tryparse(UInt16, str; base...)\n\n\n\n\n\ntryparseUInt16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(UInt16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(UInt16, str; base...).\n\n\n\n\n\ntryparseUInt16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(UInt16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(UInt16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseUInt32","page":"API Reference","title":"SimpleStringScanners.tryparseUInt32","text":"tryparseUInt32(str::AbstractString; base...)\n\nEquivalent to      - tryparse(UInt32, str; base...)\n\n\n\n\n\ntryparseUInt32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(UInt32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(UInt32, str; base...).\n\n\n\n\n\ntryparseUInt32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(UInt32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(UInt32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseUInt64","page":"API Reference","title":"SimpleStringScanners.tryparseUInt64","text":"tryparseUInt64(str::AbstractString; base...)\n\nEquivalent to      - tryparse(UInt64, str; base...)\n\n\n\n\n\ntryparseUInt64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(UInt64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(UInt64, str; base...).\n\n\n\n\n\ntryparseUInt64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(UInt64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(UInt64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseUInt128","page":"API Reference","title":"SimpleStringScanners.tryparseUInt128","text":"tryparseUInt128(str::AbstractString; base...)\n\nEquivalent to      - tryparse(UInt128, str; base...)\n\n\n\n\n\ntryparseUInt128(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(UInt128, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(UInt128, str; base...).\n\n\n\n\n\ntryparseUInt128(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(UInt128, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(UInt128, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseFloat16","page":"API Reference","title":"SimpleStringScanners.tryparseFloat16","text":"tryparseFloat16(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Float16, str; base...)\n\n\n\n\n\ntryparseFloat16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Float16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Float16, str; base...).\n\n\n\n\n\ntryparseFloat16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Float16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Float16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseFloat32","page":"API Reference","title":"SimpleStringScanners.tryparseFloat32","text":"tryparseFloat32(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Float32, str; base...)\n\n\n\n\n\ntryparseFloat32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Float32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Float32, str; base...).\n\n\n\n\n\ntryparseFloat32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Float32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Float32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseFloat64","page":"API Reference","title":"SimpleStringScanners.tryparseFloat64","text":"tryparseFloat64(str::AbstractString; base...)\n\nEquivalent to      - tryparse(Float64, str; base...)\n\n\n\n\n\ntryparseFloat64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(Float64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(Float64, str; base...).\n\n\n\n\n\ntryparseFloat64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(Float64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(Float64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparseBigFloat","page":"API Reference","title":"SimpleStringScanners.tryparseBigFloat","text":"tryparseBigFloat(str::AbstractString; base...)\n\nEquivalent to      - tryparse(BigFloat, str; base...)\n\n\n\n\n\ntryparseBigFloat(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse(BigFloat, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse(BigFloat, str; base...).\n\n\n\n\n\ntryparseBigFloat(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse(BigFloat, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse(BigFloat, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#parse1","page":"API Reference","title":"parse1","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"SimpleStringScanners.parse1\nSimpleStringScanners.parse1Bool\nSimpleStringScanners.parse1Int8\nSimpleStringScanners.parse1Int16\nSimpleStringScanners.parse1Int32\nSimpleStringScanners.parse1Int64\nSimpleStringScanners.parse1Int128\nSimpleStringScanners.parse1BigInt\nSimpleStringScanners.parse1UInt8\nSimpleStringScanners.parse1UInt16\nSimpleStringScanners.parse1UInt32\nSimpleStringScanners.parse1UInt64\nSimpleStringScanners.parse1UInt128\nSimpleStringScanners.parse1Float16\nSimpleStringScanners.parse1Float32\nSimpleStringScanners.parse1Float64\nSimpleStringScanners.parse1BigFloat","category":"page"},{"location":"reference/#SimpleStringScanners.parse1","page":"API Reference","title":"SimpleStringScanners.parse1","text":"parse1(type::Type, str::AbstractString; base...)\n\nVariant of Base.parse that can handle  Fortran's floating point numbers whose exponent part starts with d character. Substitutes d and D in str by e's, and then invokes Base.parse.\n\n\n\n\n\nparse1(type::Type, s::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nstr = advance!(scanner, width); parse1(type, str; base)\n\n\n\n\n\nparse1(type::Type, scanner::SimpleStringScanner, r::Regex, add_opts::UInt32=UInt32(0); base)\n\nEquivalent to \n\nm = scan!(scanner, r, add_opts); parse1(type, m.match; base)\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Bool","page":"API Reference","title":"SimpleStringScanners.parse1Bool","text":"parse1Bool(str::AbstractString; base...)\n\nEquivalent to      - parse1(Bool, str; base...)\n\n\n\n\n\nparse1Bool(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Bool, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Bool, str; base...).\n\n\n\n\n\nparse1Bool(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Bool, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Bool, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Int8","page":"API Reference","title":"SimpleStringScanners.parse1Int8","text":"parse1Int8(str::AbstractString; base...)\n\nEquivalent to      - parse1(Int8, str; base...)\n\n\n\n\n\nparse1Int8(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Int8, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Int8, str; base...).\n\n\n\n\n\nparse1Int8(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Int8, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Int8, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Int16","page":"API Reference","title":"SimpleStringScanners.parse1Int16","text":"parse1Int16(str::AbstractString; base...)\n\nEquivalent to      - parse1(Int16, str; base...)\n\n\n\n\n\nparse1Int16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Int16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Int16, str; base...).\n\n\n\n\n\nparse1Int16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Int16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Int16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Int32","page":"API Reference","title":"SimpleStringScanners.parse1Int32","text":"parse1Int32(str::AbstractString; base...)\n\nEquivalent to      - parse1(Int32, str; base...)\n\n\n\n\n\nparse1Int32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Int32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Int32, str; base...).\n\n\n\n\n\nparse1Int32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Int32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Int32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Int64","page":"API Reference","title":"SimpleStringScanners.parse1Int64","text":"parse1Int64(str::AbstractString; base...)\n\nEquivalent to      - parse1(Int64, str; base...)\n\n\n\n\n\nparse1Int64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Int64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Int64, str; base...).\n\n\n\n\n\nparse1Int64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Int64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Int64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Int128","page":"API Reference","title":"SimpleStringScanners.parse1Int128","text":"parse1Int128(str::AbstractString; base...)\n\nEquivalent to      - parse1(Int128, str; base...)\n\n\n\n\n\nparse1Int128(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Int128, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Int128, str; base...).\n\n\n\n\n\nparse1Int128(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Int128, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Int128, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1BigInt","page":"API Reference","title":"SimpleStringScanners.parse1BigInt","text":"parse1BigInt(str::AbstractString; base...)\n\nEquivalent to      - parse1(BigInt, str; base...)\n\n\n\n\n\nparse1BigInt(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(BigInt, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(BigInt, str; base...).\n\n\n\n\n\nparse1BigInt(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(BigInt, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(BigInt, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1UInt8","page":"API Reference","title":"SimpleStringScanners.parse1UInt8","text":"parse1UInt8(str::AbstractString; base...)\n\nEquivalent to      - parse1(UInt8, str; base...)\n\n\n\n\n\nparse1UInt8(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(UInt8, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(UInt8, str; base...).\n\n\n\n\n\nparse1UInt8(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(UInt8, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(UInt8, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1UInt16","page":"API Reference","title":"SimpleStringScanners.parse1UInt16","text":"parse1UInt16(str::AbstractString; base...)\n\nEquivalent to      - parse1(UInt16, str; base...)\n\n\n\n\n\nparse1UInt16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(UInt16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(UInt16, str; base...).\n\n\n\n\n\nparse1UInt16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(UInt16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(UInt16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1UInt32","page":"API Reference","title":"SimpleStringScanners.parse1UInt32","text":"parse1UInt32(str::AbstractString; base...)\n\nEquivalent to      - parse1(UInt32, str; base...)\n\n\n\n\n\nparse1UInt32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(UInt32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(UInt32, str; base...).\n\n\n\n\n\nparse1UInt32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(UInt32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(UInt32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1UInt64","page":"API Reference","title":"SimpleStringScanners.parse1UInt64","text":"parse1UInt64(str::AbstractString; base...)\n\nEquivalent to      - parse1(UInt64, str; base...)\n\n\n\n\n\nparse1UInt64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(UInt64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(UInt64, str; base...).\n\n\n\n\n\nparse1UInt64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(UInt64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(UInt64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1UInt128","page":"API Reference","title":"SimpleStringScanners.parse1UInt128","text":"parse1UInt128(str::AbstractString; base...)\n\nEquivalent to      - parse1(UInt128, str; base...)\n\n\n\n\n\nparse1UInt128(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(UInt128, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(UInt128, str; base...).\n\n\n\n\n\nparse1UInt128(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(UInt128, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(UInt128, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Float16","page":"API Reference","title":"SimpleStringScanners.parse1Float16","text":"parse1Float16(str::AbstractString; base...)\n\nEquivalent to      - parse1(Float16, str; base...)\n\n\n\n\n\nparse1Float16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Float16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Float16, str; base...).\n\n\n\n\n\nparse1Float16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Float16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Float16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Float32","page":"API Reference","title":"SimpleStringScanners.parse1Float32","text":"parse1Float32(str::AbstractString; base...)\n\nEquivalent to      - parse1(Float32, str; base...)\n\n\n\n\n\nparse1Float32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Float32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Float32, str; base...).\n\n\n\n\n\nparse1Float32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Float32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Float32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1Float64","page":"API Reference","title":"SimpleStringScanners.parse1Float64","text":"parse1Float64(str::AbstractString; base...)\n\nEquivalent to      - parse1(Float64, str; base...)\n\n\n\n\n\nparse1Float64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(Float64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(Float64, str; base...).\n\n\n\n\n\nparse1Float64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(Float64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(Float64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.parse1BigFloat","page":"API Reference","title":"SimpleStringScanners.parse1BigFloat","text":"parse1BigFloat(str::AbstractString; base...)\n\nEquivalent to      - parse1(BigFloat, str; base...)\n\n\n\n\n\nparse1BigFloat(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nparse1(BigFloat, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); parse1(BigFloat, str; base...).\n\n\n\n\n\nparse1BigFloat(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\nparse1(BigFloat, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); parse1(BigFloat, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#tryparse1","page":"API Reference","title":"tryparse1","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"SimpleStringScanners.tryparse1\nSimpleStringScanners.tryparse1Bool\nSimpleStringScanners.tryparse1Int8\nSimpleStringScanners.tryparse1Int16\nSimpleStringScanners.tryparse1Int32\nSimpleStringScanners.tryparse1Int64\nSimpleStringScanners.tryparse1Int128\nSimpleStringScanners.tryparse1BigInt\nSimpleStringScanners.tryparse1UInt8\nSimpleStringScanners.tryparse1UInt16\nSimpleStringScanners.tryparse1UInt32\nSimpleStringScanners.tryparse1UInt64\nSimpleStringScanners.tryparse1UInt128\nSimpleStringScanners.tryparse1Float16\nSimpleStringScanners.tryparse1Float32\nSimpleStringScanners.tryparse1Float64\nSimpleStringScanners.tryparse1BigFloat","category":"page"},{"location":"reference/#SimpleStringScanners.tryparse1","page":"API Reference","title":"SimpleStringScanners.tryparse1","text":"tryparse1(type::Type, str::AbstractString; base...)\n\nVariant of Base.tryparse that can handle  Fortran's floating point numbers whose exponent part starts with d character. Substitutes d and D in str by e's, and then invokes Base.tryparse.\n\n\n\n\n\ntryparse1(type::Type, s::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\nstr = advance!(scanner, width); tryparse1(type, str; base)\n\n\n\n\n\ntryparse1(type::Type, scanner::SimpleStringScanner, r::Regex, add_opts::UInt32=UInt32(0); base)\n\nEquivalent to \n\nm = scan!(scanner, r, add_opts); tryparse1(type, m.match; base)\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Bool","page":"API Reference","title":"SimpleStringScanners.tryparse1Bool","text":"tryparse1Bool(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Bool, str; base...)\n\n\n\n\n\ntryparse1Bool(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Bool, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Bool, str; base...).\n\n\n\n\n\ntryparse1Bool(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Bool, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Bool, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Int8","page":"API Reference","title":"SimpleStringScanners.tryparse1Int8","text":"tryparse1Int8(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Int8, str; base...)\n\n\n\n\n\ntryparse1Int8(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Int8, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Int8, str; base...).\n\n\n\n\n\ntryparse1Int8(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Int8, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Int8, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Int16","page":"API Reference","title":"SimpleStringScanners.tryparse1Int16","text":"tryparse1Int16(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Int16, str; base...)\n\n\n\n\n\ntryparse1Int16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Int16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Int16, str; base...).\n\n\n\n\n\ntryparse1Int16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Int16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Int16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Int32","page":"API Reference","title":"SimpleStringScanners.tryparse1Int32","text":"tryparse1Int32(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Int32, str; base...)\n\n\n\n\n\ntryparse1Int32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Int32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Int32, str; base...).\n\n\n\n\n\ntryparse1Int32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Int32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Int32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Int64","page":"API Reference","title":"SimpleStringScanners.tryparse1Int64","text":"tryparse1Int64(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Int64, str; base...)\n\n\n\n\n\ntryparse1Int64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Int64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Int64, str; base...).\n\n\n\n\n\ntryparse1Int64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Int64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Int64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Int128","page":"API Reference","title":"SimpleStringScanners.tryparse1Int128","text":"tryparse1Int128(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Int128, str; base...)\n\n\n\n\n\ntryparse1Int128(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Int128, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Int128, str; base...).\n\n\n\n\n\ntryparse1Int128(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Int128, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Int128, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1BigInt","page":"API Reference","title":"SimpleStringScanners.tryparse1BigInt","text":"tryparse1BigInt(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(BigInt, str; base...)\n\n\n\n\n\ntryparse1BigInt(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(BigInt, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(BigInt, str; base...).\n\n\n\n\n\ntryparse1BigInt(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(BigInt, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(BigInt, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1UInt8","page":"API Reference","title":"SimpleStringScanners.tryparse1UInt8","text":"tryparse1UInt8(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(UInt8, str; base...)\n\n\n\n\n\ntryparse1UInt8(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(UInt8, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(UInt8, str; base...).\n\n\n\n\n\ntryparse1UInt8(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(UInt8, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(UInt8, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1UInt16","page":"API Reference","title":"SimpleStringScanners.tryparse1UInt16","text":"tryparse1UInt16(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(UInt16, str; base...)\n\n\n\n\n\ntryparse1UInt16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(UInt16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(UInt16, str; base...).\n\n\n\n\n\ntryparse1UInt16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(UInt16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(UInt16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1UInt32","page":"API Reference","title":"SimpleStringScanners.tryparse1UInt32","text":"tryparse1UInt32(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(UInt32, str; base...)\n\n\n\n\n\ntryparse1UInt32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(UInt32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(UInt32, str; base...).\n\n\n\n\n\ntryparse1UInt32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(UInt32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(UInt32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1UInt64","page":"API Reference","title":"SimpleStringScanners.tryparse1UInt64","text":"tryparse1UInt64(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(UInt64, str; base...)\n\n\n\n\n\ntryparse1UInt64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(UInt64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(UInt64, str; base...).\n\n\n\n\n\ntryparse1UInt64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(UInt64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(UInt64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1UInt128","page":"API Reference","title":"SimpleStringScanners.tryparse1UInt128","text":"tryparse1UInt128(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(UInt128, str; base...)\n\n\n\n\n\ntryparse1UInt128(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(UInt128, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(UInt128, str; base...).\n\n\n\n\n\ntryparse1UInt128(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(UInt128, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(UInt128, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Float16","page":"API Reference","title":"SimpleStringScanners.tryparse1Float16","text":"tryparse1Float16(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Float16, str; base...)\n\n\n\n\n\ntryparse1Float16(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Float16, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Float16, str; base...).\n\n\n\n\n\ntryparse1Float16(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Float16, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Float16, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Float32","page":"API Reference","title":"SimpleStringScanners.tryparse1Float32","text":"tryparse1Float32(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Float32, str; base...)\n\n\n\n\n\ntryparse1Float32(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Float32, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Float32, str; base...).\n\n\n\n\n\ntryparse1Float32(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Float32, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Float32, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1Float64","page":"API Reference","title":"SimpleStringScanners.tryparse1Float64","text":"tryparse1Float64(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(Float64, str; base...)\n\n\n\n\n\ntryparse1Float64(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(Float64, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(Float64, str; base...).\n\n\n\n\n\ntryparse1Float64(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(Float64, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(Float64, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStringScanners.tryparse1BigFloat","page":"API Reference","title":"SimpleStringScanners.tryparse1BigFloat","text":"tryparse1BigFloat(str::AbstractString; base...)\n\nEquivalent to      - tryparse1(BigFloat, str; base...)\n\n\n\n\n\ntryparse1BigFloat(scanner::SimpleStringScanner, width::Integer; base...)\n\nEquivalent to \n\ntryparse1(BigFloat, scanner, width; base...), i.e.,\nstr=advance!(scanner, width); tryparse1(BigFloat, str; base...).\n\n\n\n\n\ntryparse1BigFloat(scanner::SimpleStringScanner, r::Regex, add_opts; base...)\n\nEquivalent to \n\ntryparse1(BigFloat, scanner, r, add_opts; base...), i.e.,\nm=scan!(scanner, r, add_opts); tryparse1(BigFloat, m.match; base...).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimpleStringScanners","category":"page"},{"location":"#SimpleStringScanners","page":"Home","title":"SimpleStringScanners","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimpleStringScanners.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install this package with Pkg.add(\"SimpleStringScanners\")","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using SimpleStringScanners\n\njulia> scanner=SimpleStringScanner(\"  2 3d-1\");\n\njulia> advance!(scanner,3)\n\"  2\"\n\njulia> eos(scanner)\nfalse\n\njulia> advance!(scanner,5)\n\" 3d-1\"\n\njulia> eos(scanner)\ntrue\n\njulia> advance!(scanner,1)\nERROR: BoundsError: attempt to access 8-codeunit String at index [9]","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using SimpleStringScanners\n\njulia> scanner=SimpleStringScanner(\"  2 3d-1\");\n\njulia> tryparse1Int64(scanner,3)\n2\n\njulia> tryparse1Float64(scanner,5)\n0.3\n\njulia> eos(scanner)\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using SimpleStringScanners\n\njulia> scanner=SimpleStringScanner(\" 12 34\");\n\njulia> tryparse1Int64(scanner, r\"\\d+\")\n12\n\njulia> tryparse1Int64(scanner, r\"\\d+\")\n34\n\njulia> eos(scan)\ntrue","category":"page"},{"location":"#See-also","page":"Home","title":"See also","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"class StringScanner, Ruby programming language","category":"page"}]
}
